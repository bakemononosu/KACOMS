// <auto-generated />
using System;
using ElsWebApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElsWebApp.Migrations
{
    [DbContext(typeof(ElsWebAppDbContext))]
    [Migration("20241223082945_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.AnswerGroup", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AnswerId");

                    b.Property<string>("AnswerImageData")
                        .HasColumnType("text")
                        .HasColumnName("AnswerImageData");

                    b.Property<string>("AnswerImageName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("AnswerImageName");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("AnswerText");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<bool>("ErrataFlg")
                        .HasColumnType("bit")
                        .HasColumnName("ErrataFlg");

                    b.Property<string>("ExplanationImageData")
                        .HasColumnType("text")
                        .HasColumnName("ExplanationImageData");

                    b.Property<string>("ExplanationImageName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ExplanationImageName");

                    b.Property<string>("ExplanationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("ExplanationText");

                    b.Property<byte>("OrderNo")
                        .HasColumnType("tinyint")
                        .HasColumnName("OrderNo");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerGroup");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.ExamList", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExamId");

                    b.Property<Guid>("ContentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamId");

                    b.HasIndex("ContentsId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamList");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.MChapter", b =>
                {
                    b.Property<Guid>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ChapterId");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ChapterName");

                    b.Property<string>("ContentsType")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ContentsType");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<byte>("OrderNo")
                        .HasColumnType("tinyint")
                        .HasColumnName("OrderNo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId", "OrderNo");

                    b.ToTable("MChapter");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.MCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<DateTime>("BegineDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("BegineDateTime");

                    b.Property<string>("CourseExplaination")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CourseExplaination");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("CourseName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDateTime");

                    b.Property<int>("LearningTime")
                        .HasColumnType("int")
                        .HasColumnName("LearningTime");

                    b.Property<string>("PrimaryReference")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("PrimaryReference");

                    b.Property<bool>("PublicFlg")
                        .HasColumnType("bit")
                        .HasColumnName("PublicFlg");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("CourseId");

                    b.HasIndex("BegineDateTime");

                    b.ToTable("MCourse");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.MSysCode", b =>
                {
                    b.Property<string>("ClassId")
                        .HasColumnType("varchar(2)")
                        .HasColumnName("ClassId");

                    b.Property<string>("ClassCd")
                        .HasColumnType("varchar(2)")
                        .HasColumnName("ClassCd");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ClassName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("ClassId", "ClassCd");

                    b.ToTable("MSysCode");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.MUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<bool>("AvailableFlg")
                        .HasColumnType("bit")
                        .HasColumnName("AvailableFlg");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CompanyName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("DepartmentName");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Email");

                    b.Property<string>("EmployeeNo")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("EmployeeNo");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LoginId");

                    b.Property<string>("Remarks1")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Remarks1");

                    b.Property<string>("Remarks2")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Remarks2");

                    b.Property<string>("TempRegisterId")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("TempRegisterId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("UserName");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("UserRole");

                    b.HasKey("UserId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("MUser");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.MovieContents", b =>
                {
                    b.Property<Guid>("ContentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentsId");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ContentsName");

                    b.Property<string>("ContentsPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ContentsPath");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<short>("PlaybackTime")
                        .HasColumnType("smallint")
                        .HasColumnName("PlaybackTime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("ContentsId");

                    b.HasIndex("ChapterId")
                        .IsUnique();

                    b.ToTable("MovieContents");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.QuestionCatalog", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QuestionId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<bool>("FixedOrder")
                        .HasColumnType("bit")
                        .HasColumnName("FixedOrder");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("Level");

                    b.Property<string>("MajorCd")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("MajorCd");

                    b.Property<string>("MiddleCd")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("MiddleCd");

                    b.Property<string>("MinorCd")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("MinorCd");

                    b.Property<string>("QuestionImageData")
                        .HasColumnType("text")
                        .HasColumnName("QuestionImageData");

                    b.Property<string>("QuestionImageName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("QuestionImageName");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("QuestionText");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("QuestionTitle");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("QuestionType");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint")
                        .HasColumnName("Score");

                    b.Property<string>("SeqNo")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("SeqNo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("QuestionId");

                    b.HasIndex("MajorCd", "MiddleCd", "MinorCd", "SeqNo")
                        .IsUnique();

                    b.ToTable("QuestionCatalog");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.TestContents", b =>
                {
                    b.Property<Guid>("ContentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentsId");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ContentsName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<short>("LimitTime")
                        .HasColumnType("smallint")
                        .HasColumnName("LimitTime");

                    b.Property<byte>("Questions")
                        .HasColumnType("tinyint")
                        .HasColumnName("Questions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("ContentsId");

                    b.HasIndex("ChapterId")
                        .IsUnique();

                    b.ToTable("TestContents");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserChapter", b =>
                {
                    b.Property<Guid>("UserChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserChapterId");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDatetime");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDatetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserChapterId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("UserId", "CourseId", "ChapterId")
                        .IsUnique();

                    b.ToTable("UserChapter");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserCourse", b =>
                {
                    b.Property<Guid>("UserCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserCourseId");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit")
                        .HasColumnName("DeletedFlg");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId", "CourseId")
                        .IsUnique();

                    b.ToTable("UserCourse");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserExam", b =>
                {
                    b.Property<Guid>("UserExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserExamId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint")
                        .HasColumnName("DisplayOrder");

                    b.Property<byte>("NthTime")
                        .HasColumnType("tinyint")
                        .HasColumnName("NthTime");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid>("UserChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserExamId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserChapterId", "NthTime", "QuestionId")
                        .IsUnique();

                    b.ToTable("UserExam");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserScore", b =>
                {
                    b.Property<Guid>("UserScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserScoreId");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnswerValue")
                        .HasColumnType("bit")
                        .HasColumnName("AnswerValue");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint")
                        .HasColumnName("DisplayOrder");

                    b.Property<byte>("NthTime")
                        .HasColumnType("tinyint")
                        .HasColumnName("NthTime");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint")
                        .HasColumnName("Result");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid>("UserChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserScoreId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserChapterId", "NthTime", "QuestionId", "AnswerId")
                        .IsUnique();

                    b.ToTable("UserScore");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.AnswerGroup", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.QuestionCatalog", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.ExamList", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.TestContents", "TestContents")
                        .WithMany()
                        .HasForeignKey("ContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElsWebApp.Models.Entitiy.QuestionCatalog", "QuestionCatalog")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionCatalog");

                    b.Navigation("TestContents");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.MChapter", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.MCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.MovieContents", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.MChapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.TestContents", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.MChapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserChapter", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.MChapter", "MChapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElsWebApp.Models.Entitiy.MUser", "MUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MChapter");

                    b.Navigation("MUser");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserCourse", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.MCourse", "MCourse")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElsWebApp.Models.Entitiy.MUser", "MUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MCourse");

                    b.Navigation("MUser");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserExam", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.QuestionCatalog", "QuestionCatalog")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElsWebApp.Models.Entitiy.UserChapter", "UserChapter")
                        .WithMany()
                        .HasForeignKey("UserChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionCatalog");

                    b.Navigation("UserChapter");
                });

            modelBuilder.Entity("ElsWebApp.Models.Entitiy.UserScore", b =>
                {
                    b.HasOne("ElsWebApp.Models.Entitiy.AnswerGroup", "AnswerGroup")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElsWebApp.Models.Entitiy.UserChapter", "UserChapter")
                        .WithMany()
                        .HasForeignKey("UserChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerGroup");

                    b.Navigation("UserChapter");
                });
#pragma warning restore 612, 618
        }
    }
}
